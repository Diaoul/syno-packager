#!/bin/sh
# Copyright 2010 Antoine Bertin
# <diaoulael [ignore this] at gmail period com>
#
# This file is part of syno-packager.
#
# syno-packager is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# syno-packager is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with syno-packager.  If not, see <http://www.gnu.org/licenses/>.

# Directories
DCDIR=/usr/local/debian-chroot
DCBIN=$DCDIR/bin
DCVAR=$DCDIR/var
DCCRT=$DCDIR/chroottarget
DCSHR=$DCDIR/share
DCMGR=$DCDIR/manager
TMPDIR=`echo ${SYNOPKG_PKGDEST} | perl -p -e 's|^(/volume\d).*$|$1|'`/@tmp
SYNO3APP=/usr/syno/synoman/webman/3rdparty

# Binaries
CREXE=$DCBIN/chroot

# Files
DCLOG=$DCVAR/debian-chroot-spk.log
UPGRADELOCK=/tmp/debian-chroot.upgrade.lock


preinst ()
{
	# Find the CPU architecture
	synoinfo=`get_key_value /etc.defaults/synoinfo.conf unique`
	arch=`echo $synoinfo | cut -d_ -f2`

	# Check if the architecture is supported
	if ! echo "$arch" | grep -q "%SPK_ARCH%"; then
		echo "Your architecture is not supported by this package. Architecture  : '$arch'. Synology info : '$synoinfo'. Required : '%SPK_ARCH%'."
		exit 1
	fi

	# Check if perl is installed
	if [ ! -d /usr/local/perl ]; then
		echo "perl SPK is not installed. Install it and try again."
		exit 1
	fi

	exit 0
}

postinst ()
{
	# Create the view directory
	mkdir -p $DCDIR
	mkdir -p /usr/local/bin

	# Create symlinks to the installation ditectory
	ln -s ${SYNOPKG_PKGDEST}/bin $DCBIN
	ln -s ${SYNOPKG_PKGDEST}/var $DCVAR
	ln -s ${SYNOPKG_PKGDEST}/chroottarget $DCCRT
	ln -s ${SYNOPKG_PKGDEST}/share $DCSHR
	ln -s ${SYNOPKG_PKGDEST}/manager $DCMGR

	# Create symlinks
	ln -s $CREXE /usr/local/bin/chroot

	# Correct the files ownership
	chown -R root:root ${SYNOPKG_PKGDEST}

	# Install the application in the main interface.
	if [ -d $SYNO3APP ]
	then
		rm -f $SYNO3APP/debian-chroot
		ln -s $DCSHR/3rdparty $SYNO3APP/debian-chroot
	fi

	# Correct the files permission
	chmod 777 $DCBIN/*

	# Restore the debian chroot if we're upgrading
	if [ -f $UPGRADELOCK ]; then
		rm -rf ${SYNOPKG_PKGDEST}/chroottarget/
		mv $TMPDIR/chroottarget.bak/ ${SYNOPKG_PKGDEST}/chroottarget/
		mv $TMPDIR/manager.db ${SYNOPKG_PKGDEST}/manager/
	else # Debootstrap second stage and configure the chroot environment
		$CREXE $DCCRT /debootstrap/debootstrap --second-stage > $DCLOG 2>&1
		mkdir -p $DCCRT/proc
		mkdir -p $DCCRT/dev/pts
		mkdir -p $DCCRT/sys
		chmod 666 $DCCRT/dev/null
		chmod 666 $DCCRT/dev/tty
		chmod 777 $DCCRT/tmp
		cp /etc/hosts /etc/hostname /etc/resolv.conf $DCCRT/etc/
		echo "deb http://ftp.fr.debian.org/debian/ squeeze main contrib non-free" > $DCCRT/etc/apt/sources.list
		echo "deb http://security.debian.org/ squeeze/updates main contrib non-free" >> $DCCRT/etc/apt/sources.list
		echo "#!/bin/sh" > $DCCRT/usr/sbin/policy-rc.d
		echo "exit 101" >> $DCCRT/usr/sbin/policy-rc.d
	fi

	exit 0
}

preuninst ()
{
	# Save the debian chroot if we're upgrading
	if [ -f $UPGRADELOCK ]; then
		cp ${SYNOPKG_PKGDEST}/manager/manager.db $TMPDIR/
		mv ${SYNOPKG_PKGDEST}/chroottarget/ $TMPDIR/chroottarget.bak/
	fi

	exit 0
}

postuninst ()
{
	# Remove symlink
	rm -f /usr/local/bin/chroot
	
	# Remove the application from the main interface if it was previously added.
	if [ -h $SYNO3APP/debian-chroot ]
	then
		rm -f $SYNO3APP/debian-chroot
	fi

	# Remove symlinks from /usr/local/debian-chroot
	rm -f $DCBIN
	rm -f $DCVAR
	rm -f $DCCRT
	rm -f $DCSHR
	rm -f $DCMGR

	# Remove the view directory
	rmdir $DCDIR

	exit 0
}

preupgrade ()
{
	touch $UPGRADELOCK

	exit 0
}

postupgrade ()
{
	rm -f $UPGRADELOCK

	exit 0
}
